name: CI/CD Symfony projects

env:
  REGISTRY: ghcr.io/alpsify/lychen/test
  GITHUB_SHA: ${{ github.sha }}

on:
  pull_request:
  workflow_dispatch: {} # Permet d’exécuter manuellement les jobs de déploiement

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  define-matrix:
    name: 'Gather affected projects'
    runs-on: ubuntu-latest
    outputs:
      projects: ${{ steps.projects.outputs.projects }}
    steps:
      - uses: 'actions/checkout@v4'
        with:
          fetch-depth: 0
      - name: Set up Moon Toolchain
        uses: 'moonrepo/setup-toolchain@v0'
      - name: Define Projects
        id: projects
        run: |
          echo "projects=$(moon query projects --tags symfony --affected --downstream deep | awk 'NR % 2 == 1 {print "\"" $1 "\""}' | paste -sd, - | sed 's/^/\[/; s/$/\]/')" >> "$GITHUB_OUTPUT"
      - run: echo ${{ steps.projects.outputs.projects }}

  build-and-push-test-image:
    if: ${{ needs.define-matrix.outputs.projects != '[]' && needs.define-matrix.outputs.projects != '' }}
    name: '${{ matrix.projects }} | Build docker test image'
    needs: define-matrix
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        projects: ${{ fromJSON(needs.define-matrix.outputs.projects) }}
    runs-on: ubuntu-latest
    env:
      TEST_IMAGE_NAME: '${REGISTRY}/${{ matrix.projects }}'
    steps:
      - uses: 'actions/checkout@v4'
        with:
          fetch-depth: 0

      - name: Set up Moon Toolchain
        uses: 'moonrepo/setup-toolchain@v0'
        with:
          auto-install: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull test image if exists
        run: docker pull ${{ env.TEST_IMAGE_NAME }}:latest || true

      - name: Build docker test image
        run: moon ci ${{ matrix.projects }}:ci-test-build-docker-image

      - name: Push docker test image
        run: |
          docker push ${{ env.TEST_IMAGE_NAME }}:${{ github.sha }}
          docker push ${{ env.TEST_IMAGE_NAME }}:latest

  install-vendors:
    name: '${{ matrix.projects }} | Install vendors'
    runs-on: ubuntu-latest
    needs:
      - define-matrix
      - build-and-push-test-image
    env:
      TEST_IMAGE_NAME: '$REGISTRY/${{ matrix.projects }}'
    strategy:
      fail-fast: false
      matrix:
        projects: ${{ fromJSON(needs.define-matrix.outputs.projects) }}
    steps:
      - uses: 'actions/checkout@v4'
        with:
          fetch-depth: 0

      - name: Set up Moon Toolchain
        uses: 'moonrepo/setup-toolchain@v0'

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Install vendors
        run: moon ci ${{ matrix.projects }}:ci-install-vendors

      - name: Archive code coverage results
        uses: actions/upload-artifact@v4
        with:
          name: vendors-packages
          path: |
            vendor
            tools/vendor
            node_modules
            .cache

  lint-php:
    name: '${{ matrix.projects }} | Lint PHP files'
    needs:
      - define-matrix
      - build-and-push-test-image
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        projects: ${{ fromJSON(needs.define-matrix.outputs.projects) }}
    env:
      TEST_IMAGE_NAME: '$REGISTRY/${{ matrix.projects }}'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Moon Toolchain
        uses: 'moonrepo/setup-toolchain@v0'

      - name: Install tools
        run: moon ci ${{ matrix.projects }}:ci-install-tools

      - name: Lint src folder
        run: moon ci ${{ matrix.projects }}:ci-php-cs-fixer-src

      - name: Lint test folder
        run: moon ci ${{ matrix.projects }}:ci-php-cs-fixer-test

  validate-db-schema:
    name: '${{ matrix.projects }} | Validate DB schema'
    needs:
      - define-matrix
      - install-vendors
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        projects: ${{ fromJSON(needs.define-matrix.outputs.projects) }}
    env:
      TEST_IMAGE_NAME: '$REGISTRY/${{ matrix.projects }}'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Moon Toolchain
        uses: 'moonrepo/setup-toolchain@v0'

      - name: Validate DB
        run: moon ci ${{ matrix.projects }}:ci-validate-db-schema

  check-vulnerabilities:
    name: '${{ matrix.projects }} | Check packages vulnerabilities'
    needs:
      - define-matrix
      - install-vendors
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        projects: ${{ fromJSON(needs.define-matrix.outputs.projects) }}
    env:
      TEST_IMAGE_NAME: '$REGISTRY/${{ matrix.projects }}'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Moon Toolchain
        uses: 'moonrepo/setup-toolchain@v0'

      - name: Check vulnerabilities
        run: moon ci ${{ matrix.projects }}:ci-check-vulnerabilities

  phpunit:
    name: '${{ matrix.projects }} | PHPUnit'
    needs:
      - define-matrix
      - install-vendors
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        projects: ${{ fromJSON(needs.define-matrix.outputs.projects) }}
    env:
      TEST_IMAGE_NAME: '$REGISTRY/${{ matrix.projects }}'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Moon Toolchain
        uses: 'moonrepo/setup-toolchain@v0'

      - name: Test
        run: moon ci ${{ matrix.projects }}:ci-test-phpunit tests/Functionnal
