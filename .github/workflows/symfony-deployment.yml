name: 'Symfony | Deployment'

env:
  REGISTRY: ghcr.io

on:
  push:
    branches:
      - main
  workflow_dispatch: {}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  define-matrix:
    name: 'Gather affected projects'
    runs-on: ubuntu-latest
    outputs:
      projects: ${{ steps.projects.outputs.projects }}
    steps:
      - uses: 'actions/checkout@v4'
        with:
          fetch-depth: 0

      - name: Set up Moon Toolchain
        uses: 'moonrepo/setup-toolchain@v0'

      - run: moon query projects --affected --tags symfony --downstream deep --type application

      - name: Define Projects
        id: projects
        run: |
          echo "projects=$(moon query projects --affected --tags symfony --downstream deep --type application --json | jq -r '.projects | map(.id | @json) | join(",")' | sed 's/^/\[/; s/$/\]/')" >> "$GITHUB_OUTPUT"
      
      - run: echo ${{ steps.projects.outputs.projects }}

  build-and-push:
    if: ${{ needs.define-matrix.outputs.projects != '[]' && needs.define-matrix.outputs.projects != '' }}
    # Production and staging are using the same image
    name: '${{ matrix.projects }} | Build and push production image'
    needs: define-matrix
    continue-on-error: true
    strategy:
      #fail-fast: false
      matrix:
        projects: ${{ fromJSON(needs.define-matrix.outputs.projects) }}
    runs-on: ubuntu-latest
    steps:
      - uses: 'actions/checkout@v4'
        with:
          fetch-depth: 0

      - name: Set up Moon Toolchain
        uses: 'moonrepo/setup-toolchain@v0'
        with:
          auto-install: true

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64,linux/arm64

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push docker images
        run: 'moon ci ${{ matrix.projects }}:production-docker-build'

  deploy-to-staging:
    name: '${{ matrix.projects }} | Staging deployment'
    runs-on: ubuntu-latest
    needs:
      - define-matrix
      - build-and-push
    strategy:
      #fail-fast: false
      matrix:
        projects: ${{ fromJSON(needs.define-matrix.outputs.projects) }}
    steps:
      - uses: 'actions/checkout@v4'
        with:
          fetch-depth: 0

      - name: Set up Moon Toolchain
        uses: 'moonrepo/setup-toolchain@v0'

      - name: 'Deploy new image'
        env:
          DOKPLOY_API_TOKEN: ${{ secrets.DOKPLOY_API_TOKEN }}
          DOKPLOY_API_URL: ${{ secrets.DOKPLOY_API_URL }}
        run: 'moon ci ${{ matrix.projects }}:staging-dokploy-compose-deploy'

  deploy-to-production:
    name: '${{ matrix.projects }} | Production deployment'
    runs-on: ubuntu-latest
    environment: prod-manual
    needs:
      - define-matrix
      - build-and-push
      - deploy-to-staging
    strategy:
      #fail-fast: false
      matrix:
        projects: ${{ fromJSON(needs.define-matrix.outputs.projects) }}
    steps:
      - uses: 'actions/checkout@v4'
        with:
          fetch-depth: 0

      - name: Set up Moon Toolchain
        uses: 'moonrepo/setup-toolchain@v0'

      - name: 'Deploy new image'
        env:
          DOKPLOY_API_TOKEN: ${{ secrets.DOKPLOY_API_TOKEN }}
          DOKPLOY_API_URL: ${{ secrets.DOKPLOY_API_URL }}
        run: 'moon ci ${{ matrix.projects }}:production-dokploy-compose-deploy'
